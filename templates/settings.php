<?php
/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class eos_events_settings {
	private $eos_events_settings_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'eos_events_settings_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'eos_events_settings_page_init' ) );
	}

	public function eos_events_settings_add_plugin_page() {
		add_submenu_page(
			'eos_events_plugin', // Top level slug
			'Event Settings', // Page title
			'Settings', // menu_title
			'manage_options', // capability
			'eos_events-settings', // menu_slug
			array( $this, 'eos_events_settings_create_admin_page' ), // function
			2 // position
		);
	}

	public function eos_events_settings_create_admin_page() {
		$this->eos_events_settings_options = get_option( 'eos_events_settings_option_name' );
		settings_errors(); ?>

		<div class="wrap">
			<h1>Event Settings</h1>
			<h2 style="margin-right:30%"><b>A couple notes:</b></h2>
			<ul>
				<li>This plugin checks twice daily (via WordPress cron) for expired events, and moves them to trash.</li>
				<li>The shortcode <b>[event_banner]</b> displays concise info of all events in cronologically ordered banners, wrapped in BootStrap classes.</li>
				<li>The shortcode <b>[event_callout]</b> displays info and thumbnail of the closest event, wrapped in BootStrap classes.</li>
			</ul>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'eos_events_settings_option_group' );
					do_settings_sections( 'eos-events-settings-admin' );
					submit_button();
				?>
			</form>
		</div>

	<?php }

	public function eos_events_settings_page_init() {
		register_setting(
			'eos_events_settings_option_group', // option_group
			'eos_events_settings_option_name', // option_name
			array( $this, 'eos_events_settings_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'eos_events_settings_setting_section', // id
			'', // title
			array( $this, 'eos_events_settings_section_info' ), // callback
			'eos-events-settings-admin' // page
		);

		add_settings_field(
			'banner_limit_0', // id
			'Banner limit', // title
			array( $this, 'banner_limit_0_callback' ), // callback
			'eos-events-settings-admin', // page
			'eos_events_settings_setting_section' // section
		);

	}

	public function eos_events_settings_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['banner_limit_0'] ) ) {
			$sanitary_values['banner_limit_0'] = sanitize_text_field( $input['banner_limit_0'] );
		}

		return $sanitary_values;
	}

	public function eos_events_settings_section_info() {
		
	}

	public function banner_limit_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="eos_events_settings_option_name[banner_limit_0]" id="banner_limit_0" value="%s" placeholder="2">',
			isset( $this->eos_events_settings_options['banner_limit_0'] ) ? esc_attr( $this->eos_events_settings_options['banner_limit_0']) : ''
		);
	}
}
if ( is_admin() )
	$eos_events_settings = new eos_events_settings();

/* 
 * Retrieve this value with:
 * $eos_events_settings_options = get_option( 'eos_events_settings_option_name' ); // Array of All Options
 * $banner_limit_0 = $eos_events_settings_options['banner_limit_0']; // Admin Email Address
 */
